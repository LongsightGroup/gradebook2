diff --git a/.classpath b/.classpath
index dd043d1..7791409 100644
--- a/.classpath
+++ b/.classpath
@@ -23,11 +23,16 @@
 	<classpathentry kind="var" path="M2_REPO/org/gwtwidgets/gwt-sl/0.1.5/gwt-sl-0.1.5.jar"/>
 	<classpathentry kind="var" path="M2_REPO/com/extjs/gxt/1.2.3/gxt-1.2.3.jar"/>
 	<classpathentry kind="var" path="M2_REPO/com/google/gwt/gears/gwt-gears/1.1.1/gwt-gears-1.1.1.jar"/>
-	<classpathentry kind="var" path="GWT_HOME/gwt-dev-linux.jar"/>
+	<classpathentry kind="var" path="GWT_HOME/gwt-dev-mac.jar"/>
 	<classpathentry kind="var" path="GWT_HOME/gwt-user.jar"/>
 	<classpathentry kind="var" path="GWT_HOME/gwt-servlet.jar"/>
 	<classpathentry kind="var" path="M2_REPO/commons-fileupload/commons-fileupload/1.1.1/commons-fileupload-1.1.1.jar"/>
 	<classpathentry kind="var" path="M2_REPO/com/thoughtworks/xstream/xstream/1.3/xstream-1.3.jar"/>
 	<classpathentry kind="var" path="M2_REPO/commons-io/commons-io/1.4/commons-io-1.4.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/sakaiproject/sakai-coursemanagement-api/M2/sakai-coursemanagement-api-M2.jar" sourcepath="/SAKAI_SRC/course-management"/>
+	<classpathentry kind="var" path="M2_REPO/org/sakaiproject/sakai-component/M2/sakai-component-M2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/sakaiproject/sakai-ucd-enterprise-data-service-api/M2/sakai-ucd-enterprise-data-service-api-M2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/sakaiproject/sakai-component-api/M2/sakai-component-api-M2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar" sourcepath="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4-sources.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/INSTALL.txt b/INSTALL.txt
index 625bf20..86629b2 100644
--- a/INSTALL.txt
+++ b/INSTALL.txt
@@ -6,5 +6,6 @@ Currently, it should build against a vanilla 2.5.x branch sakai. You will need t
 (2) Apply the patch labeled gb-2-5-x.patch under the original gradebook module.
 (3) Check out this project as "gradebook-gwt" and add it as a module under your sakai pom.xml for the active profile.
 (4) Under your sakai profile in .m2/settings.xml set the <gwt.platform> tag to linux, mac, or windows (only tested on linux so far).
+(5) Optional: Configure Export Advisor by specifying which bean to inject. This is done via the gradebook2.properties file, which is located here: client/src/config/gradebook2.properties
 (5) Build sakai. Note that the GWT build takes quite a while. If you want to speed it up for testing (slightly) you can apply the patch called "client/firefox.patch" to the client directory (cd client; patch -p0 < firefox.patch) and it will then build a version that is only compatible with Firefox/Gecko.
 
diff --git a/api/pom.xml b/api/pom.xml
index 7e62ab5..f611e3e 100644
--- a/api/pom.xml
+++ b/api/pom.xml
@@ -50,6 +50,12 @@
       <version>${sakai.version}</version>
       <scope>provided</scope>
     </dependency>
+    <dependency>
+      <groupId>tomcat</groupId>
+      <artifactId>servlets-default</artifactId>
+      <version>5.5.23</version>
+      <scope>compile</scope>
+    </dependency>
   </dependencies>
   <build>
     <resources/>
diff --git a/api/src/java/org/sakaiproject/gradebook/gwt/sakai/ExportAdvisor.java b/api/src/java/org/sakaiproject/gradebook/gwt/sakai/ExportAdvisor.java
new file mode 100644
index 0000000..4a01a62
--- /dev/null
+++ b/api/src/java/org/sakaiproject/gradebook/gwt/sakai/ExportAdvisor.java
@@ -0,0 +1,32 @@
+package org.sakaiproject.gradebook.gwt.sakai;
+
+import java.util.List;
+import java.util.Map;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+
+
+public interface ExportAdvisor {
+	
+	public enum Column { STUDENT_NAME, STUDENT_GRADE, EXPORT_USER_ID, EXPORT_CM_ID };
+	
+	/*
+	 * @param userEid : The user's EID
+	 * @param providerGroupId : Group.getProviderGroupId();
+	 * 
+	 */
+	public String getExportCourseManagemntId(String userEid, String providerGroupId);
+	
+	/*
+	 * @param userEid : The user's EID
+	 * 
+	 */
+	public String getExportUserId(String userEid);
+	
+	/*
+	 * 
+	 */
+	public void submitFinalGrade(List<Map<Column,String>> studentDataList, String gradebookUid, HttpServletRequest request, HttpServletResponse response);
+}
diff --git a/client/pom.xml b/client/pom.xml
index c8297ec..f9988f0 100644
--- a/client/pom.xml
+++ b/client/pom.xml
@@ -58,6 +58,9 @@
 					<exclude>**/*.java</exclude>
            		</excludes-->
 			</resource>
+			<resource>
+				<directory>${basedir}/src/config</directory>
+			</resource>
 		</resources>
 		<plugins>
 			<plugin>
@@ -425,6 +428,25 @@
       		<artifactId>sakai-util-api</artifactId>
       		<version>${sakai.version}</version>
     	</dependency>
+		
+		<dependency>
+			<groupId>org.sakaiproject</groupId>
+			<artifactId>sakai-component</artifactId>
+			<version>${sakai.version}</version>
+		</dependency>
+		
+		<dependency>
+			<groupId>org.sakaiproject</groupId>
+			<artifactId>sakai-component-api</artifactId>
+			<version>${sakai.version}</version>
+		</dependency>
+   
+		<dependency>
+			<groupId>org.sakaiproject</groupId>
+			<artifactId>sakai-ucd-enterprise-data-service-api</artifactId>
+			<version>${sakai.version}</version>
+			<scope>provided</scope>
+		</dependency>
     	
     	<dependency>
       		<groupId>org.hibernate</groupId>
diff --git a/client/src/config/gradebook2.properties b/client/src/config/gradebook2.properties
new file mode 100644
index 0000000..beefc2b
--- /dev/null
+++ b/client/src/config/gradebook2.properties
@@ -0,0 +1 @@
+org.sakaiproject.gradebook.gwt.sakai.api.ExportAdvisor=org.sakaiproject.gradebook.gwt.sakai.api.ExportAdvisor
\ No newline at end of file
diff --git a/client/src/java/org/sakaiproject/gradebook/gwt/GradebookApplication.gwt.xml b/client/src/java/org/sakaiproject/gradebook/gwt/GradebookApplication.gwt.xml
index 5d8ed0a..b320fd3 100644
--- a/client/src/java/org/sakaiproject/gradebook/gwt/GradebookApplication.gwt.xml
+++ b/client/src/java/org/sakaiproject/gradebook/gwt/GradebookApplication.gwt.xml
@@ -28,6 +28,8 @@
   	<servlet path="/importHandler" class="org.sakaiproject.gradebook.gwt.server.ImportHandler"/>
   
   	<servlet path="/export" class="org.sakaiproject.gradebook.gwt.server.ImportHandler"/>
+  	
+  	<servlet path="/final-grade-submission" class="org.sakaiproject.gradebook.gwt.server.FinalGradeSubmissionHandler"/>
   
   	<set-property name="gwt.suppressNonStaticFinalFieldWarnings" value="true" /> 
 
diff --git a/client/src/java/org/sakaiproject/gradebook/gwt/client/gxt/InstructorViewContainer.java b/client/src/java/org/sakaiproject/gradebook/gwt/client/gxt/InstructorViewContainer.java
index 7af1250..47ff85c 100644
--- a/client/src/java/org/sakaiproject/gradebook/gwt/client/gxt/InstructorViewContainer.java
+++ b/client/src/java/org/sakaiproject/gradebook/gwt/client/gxt/InstructorViewContainer.java
@@ -56,11 +56,14 @@ import com.extjs.gxt.ui.client.event.SelectionListener;
 import com.extjs.gxt.ui.client.event.TabPanelEvent;
 import com.extjs.gxt.ui.client.event.WindowEvent;
 import com.extjs.gxt.ui.client.widget.ContentPanel;
+import com.extjs.gxt.ui.client.widget.Dialog;
 import com.extjs.gxt.ui.client.widget.LayoutContainer;
+import com.extjs.gxt.ui.client.widget.MessageBox;
 import com.extjs.gxt.ui.client.widget.TabItem;
 import com.extjs.gxt.ui.client.widget.TabPanel;
 import com.extjs.gxt.ui.client.widget.Window;
 import com.extjs.gxt.ui.client.widget.TabPanel.TabPosition;
+import com.extjs.gxt.ui.client.widget.button.Button;
 import com.extjs.gxt.ui.client.widget.form.SimpleComboBox;
 import com.extjs.gxt.ui.client.widget.form.SimpleComboValue;
 import com.extjs.gxt.ui.client.widget.layout.FitLayout;
@@ -72,6 +75,11 @@ import com.extjs.gxt.ui.client.widget.menu.SeparatorMenuItem;
 import com.extjs.gxt.ui.client.widget.toolbar.TextToolItem;
 import com.extjs.gxt.ui.client.widget.toolbar.ToolBar;
 import com.google.gwt.core.client.GWT;
+import com.google.gwt.http.client.Request;
+import com.google.gwt.http.client.RequestBuilder;
+import com.google.gwt.http.client.RequestCallback;
+import com.google.gwt.http.client.RequestException;
+import com.google.gwt.http.client.Response;
 import com.google.gwt.user.client.Element;
 import com.google.gwt.user.client.ui.Frame;
 import com.google.gwt.user.client.ui.KeyboardListener;
@@ -699,6 +707,66 @@ public class InstructorViewContainer extends ContentPanel {
 		
 		moreActionsMenu.add(exportItem);
 		
+		// GRBK-37
+		// TODO: make this configurable via sakai.properties
+		MenuItem finalGradeSubmissionMenuItem = new MenuItem("Final Grade Submission", new SelectionListener<MenuEvent>() {
+
+			@Override
+			public void componentSelected(MenuEvent ce) {
+
+				MessageBox.confirm("Confirm", "Are you sure you want to submit the final grades?", new Listener<WindowEvent>() {
+
+					public void handleEvent(WindowEvent be) {
+						
+						Button button = be.buttonClicked;
+						
+						if(button.getItemId().equals(Dialog.YES)) {
+							
+							String uri = GWT.getModuleBaseURL() + "/final-grade-submission?gradebookUid=" + gradebookUid;
+							RequestBuilder requestBuilder = new RequestBuilder(RequestBuilder.GET, uri);
+							requestBuilder.setHeader("Content-Type", "text/html");
+							try {
+								requestBuilder.sendRequest("", new RequestCallback() {
+
+									public void onError(Request request, Throwable exception) {
+
+										GWT.log("onError", null);
+									}
+
+									public void onResponseReceived(Request request, Response response) {
+
+										GWT.log("onResponseReceived", null);
+										
+										if (201 == response.getStatusCode()) {
+											GWT.log("HTTP Status 201", null);
+											GWT.log("Response test = " + response.getText(), null);
+											String responseText = response.getText().trim();
+											if(null == responseText || "".equals(responseText)) {
+												// TODO: display error
+											}
+											else {
+											
+												com.google.gwt.user.client.Window.open(responseText, "_blank","status=0,toolbar=0,menubar=0,location=0,scrollbars=1,resizable=1");
+											}
+										}
+										else if(500 == response.getStatusCode()) {
+											GWT.log("HTTP Status 500", null);
+										}
+									}
+									
+								});
+							} catch (RequestException e) {
+								// TODO Auto-generated catch block
+								e.printStackTrace();
+							}
+						}
+					}	
+				}); 
+			}
+		});
+		
+		moreActionsMenu.add(finalGradeSubmissionMenuItem);
+		
 		return moreActionsMenu;
 	}
 	
diff --git a/client/src/java/org/sakaiproject/gradebook/gwt/client/model/StudentModel.java b/client/src/java/org/sakaiproject/gradebook/gwt/client/model/StudentModel.java
index d9a53ba..f11fc25 100644
--- a/client/src/java/org/sakaiproject/gradebook/gwt/client/model/StudentModel.java
+++ b/client/src/java/org/sakaiproject/gradebook/gwt/client/model/StudentModel.java
@@ -52,7 +52,10 @@ public class StudentModel extends EntityModel implements Comparable<StudentModel
 		SECTION(Group.STUDENT_INFORMATION, "Section"), 
 		COURSE_GRADE(Group.GRADES, "Course Grade"), 
 		GRADE_OVERRIDE(Group.GRADES, "Grade Override"), 
-		ASSIGNMENT(Group.ASSIGNMENTS, "");
+		ASSIGNMENT(Group.ASSIGNMENTS, ""),
+		EXPORT_CM_ID(Group.STUDENT_INFORMATION, "Export CM Id"),
+		EXPORT_USER_ID(Group.STUDENT_INFORMATION, "Export User Id");
+
 	
 		private Group group;
 		private String displayName;
@@ -156,7 +159,26 @@ public class StudentModel extends EntityModel implements Comparable<StudentModel
 	{
 		set(Key.COURSE_GRADE.name(), studentGrade);
 	}
-
+	
+	public String getExportCmId()
+	{
+		return get(Key.EXPORT_CM_ID.name());
+	}
+	
+	public void setExportCmId(String exportCmId)
+	{
+		set(Key.EXPORT_CM_ID.name(), exportCmId);
+	}
+	
+	public String getExportUserId()
+	{
+		return get(Key.EXPORT_USER_ID.name());
+	}
+	
+	public void setExportUserId(String exportUserId)
+	{
+		set(Key.EXPORT_USER_ID.name(), exportUserId);
+	}
 	
 	@Override
 	public boolean equals(Object obj) {
diff --git a/client/src/java/org/sakaiproject/gradebook/gwt/sakai/DelegateFacadeImpl.java b/client/src/java/org/sakaiproject/gradebook/gwt/sakai/DelegateFacadeImpl.java
index b428732..89fe23c 100644
--- a/client/src/java/org/sakaiproject/gradebook/gwt/sakai/DelegateFacadeImpl.java
+++ b/client/src/java/org/sakaiproject/gradebook/gwt/sakai/DelegateFacadeImpl.java
@@ -42,7 +42,6 @@ import java.util.UUID;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.hibernate.StaleObjectStateException;
 import org.sakaiproject.authz.api.Member;
 import org.sakaiproject.exception.IdUnusedException;
 import org.sakaiproject.gradebook.gwt.client.GradebookToolFacade;
@@ -130,6 +129,7 @@ private static final long serialVersionUID = 1L;
 	private GradeCalculations gradeCalculations;
 	private GradebookFrameworkService frameworkService;
 	private SiteService siteService;
+	private ExportAdvisor exportAdvisor;
 
 	
 	@SuppressWarnings("unchecked")
@@ -1612,7 +1612,8 @@ private static final long serialVersionUID = 1L;
 		// This is how we track which column is which - by the user's uid
 		cellMap.put(StudentModel.Key.UID.name(), userRecord.getUserUid());
 		cellMap.put(StudentModel.Key.EID.name(), userRecord.getUserEid());
-		
+		cellMap.put(StudentModel.Key.EXPORT_CM_ID.name(), userRecord.getExportCourseManagemntId());
+		cellMap.put(StudentModel.Key.EXPORT_USER_ID.name(), userRecord.getExportUserId());
 		// Need this to show the grade override
 		CourseGradeRecord courseGradeRecord = userRecord.getCourseGradeRecord(); //gradebookManager.getStudentCourseGradeRecord(gradebook, userRecord.getUserUid());
 	
@@ -3816,6 +3817,10 @@ private static final long serialVersionUID = 1L;
 						}
 						
 						userRecord.setSectionTitle(section.getTitle());
+						
+						// GRBK-37
+						userRecord.setExportCourseManagemntId(exportAdvisor.getExportCourseManagemntId(member.getUserEid(), group.getProviderGroupId()));
+						userRecord.setExportUserId(exportAdvisor.getExportUserId(member.getUserEid()));
 					}
 				}
 			}
@@ -3996,5 +4001,7 @@ private static final long serialVersionUID = 1L;
 		this.gbService = gbService;
 	}
 
-
+	public void setExportAdvisor(ExportAdvisor exportAdvisor) {
+		this.exportAdvisor = exportAdvisor;
+	}
 }
diff --git a/client/src/java/org/sakaiproject/gradebook/gwt/sakai/GradebookFinalGradeSubmissionController.java b/client/src/java/org/sakaiproject/gradebook/gwt/sakai/GradebookFinalGradeSubmissionController.java
new file mode 100644
index 0000000..ec18588
--- /dev/null
+++ b/client/src/java/org/sakaiproject/gradebook/gwt/sakai/GradebookFinalGradeSubmissionController.java
@@ -0,0 +1,78 @@
+package org.sakaiproject.gradebook.gwt.sakai;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.sakaiproject.gradebook.gwt.client.GradebookToolFacade;
+import org.sakaiproject.gradebook.gwt.client.action.UserEntityGetAction;
+import org.sakaiproject.gradebook.gwt.client.action.Action.EntityType;
+import org.sakaiproject.gradebook.gwt.client.exceptions.FatalException;
+import org.sakaiproject.gradebook.gwt.client.model.StudentModel;
+import org.sakaiproject.gradebook.gwt.sakai.ExportAdvisor.Column;
+import org.springframework.web.servlet.ModelAndView;
+import org.springframework.web.servlet.mvc.Controller;
+
+public class GradebookFinalGradeSubmissionController implements Controller {
+
+	private static final Log log = LogFactory.getLog(GradebookFinalGradeSubmissionController.class);
+	
+	private GradebookToolFacade delegateFacade;
+	private ExportAdvisor exportAdvisor;
+	
+	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
+		
+		String queryString = request.getQueryString();
+
+		int n = queryString.indexOf("gradebookUid=") + 13;
+		String gradebookUid = queryString.substring(n);
+		
+		List<StudentModel> rows = null;
+
+		UserEntityGetAction<StudentModel> getRowsAction = new UserEntityGetAction<StudentModel>(gradebookUid, EntityType.STUDENT);
+		
+		try {
+
+			rows = delegateFacade.getEntityList(getRowsAction);
+
+		} catch (FatalException e) {
+
+			log.error("EXCEPTION: Wasn't able to get the list of Student Models");
+			// 500 Internal Server Error
+			response.setStatus(500);
+			e.printStackTrace();
+			return null;
+		}
+		
+		List<Map<Column,String>> studentDataList = new ArrayList<Map<Column,String>>();
+		
+		for (StudentModel studentModel : rows) {
+			
+			Map<Column, String> studentData = new HashMap<Column, String>();
+			studentData.put(Column.EXPORT_USER_ID, studentModel.getExportUserId());
+			studentData.put(Column.STUDENT_NAME, studentModel.getStudentName());
+			studentData.put(Column.EXPORT_CM_ID, studentModel.getExportCmId());
+			studentData.put(Column.STUDENT_GRADE, studentModel.getStudentGrade());
+			studentDataList.add(studentData);
+		}
+
+		exportAdvisor.submitFinalGrade(studentDataList, gradebookUid, request, response);
+		
+		return null;
+	}
+	
+	public void setDelegateFacade(GradebookToolFacade delegateFacade) {
+		this.delegateFacade = delegateFacade;
+	}
+	
+	public void setExportAdvisor(ExportAdvisor exportAdvisor) {
+		this.exportAdvisor = exportAdvisor;
+	}
+
+}
diff --git a/client/src/java/org/sakaiproject/gradebook/gwt/sakai/SampleExportAdvisor.java b/client/src/java/org/sakaiproject/gradebook/gwt/sakai/SampleExportAdvisor.java
new file mode 100644
index 0000000..0a91fb0
--- /dev/null
+++ b/client/src/java/org/sakaiproject/gradebook/gwt/sakai/SampleExportAdvisor.java
@@ -0,0 +1,30 @@
+package org.sakaiproject.gradebook.gwt.sakai;
+
+import java.util.List;
+import java.util.Map;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+
+public class SampleExportAdvisor implements ExportAdvisor {
+
+	public String getExportCourseManagemntId(String userEid, String providerGroupId) {
+
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public String getExportUserId(String userEid) {
+
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public void submitFinalGrade(List<Map<Column, String>> studentDataList, String gradebookUid, HttpServletRequest request, HttpServletResponse response) {
+
+		// TODO Auto-generated method stub
+		
+	}
+
+}
diff --git a/client/src/java/org/sakaiproject/gradebook/gwt/sakai/UserRecord.java b/client/src/java/org/sakaiproject/gradebook/gwt/sakai/UserRecord.java
index 950d19b..a7e83cc 100644
--- a/client/src/java/org/sakaiproject/gradebook/gwt/sakai/UserRecord.java
+++ b/client/src/java/org/sakaiproject/gradebook/gwt/sakai/UserRecord.java
@@ -44,6 +44,8 @@ public class UserRecord {
 	private Map<Long, AssignmentGradeRecord> gradeRecordMap;
 	private Map<Long, Comment> commentMap;
 	private String displayGrade;
+	private String exportCourseManagemntId;
+	private String exportUserId;
 
 	public UserRecord(String userUid) {
 		this.userUid = userUid;
@@ -170,5 +172,19 @@ public class UserRecord {
 		this.userEid = userEid;
 	}
 	
+	public String getExportCourseManagemntId() {
+		return exportCourseManagemntId;
+	}
+	
+	public void setExportCourseManagemntId(String exportCourseManagemntId) {
+		this.exportCourseManagemntId = exportCourseManagemntId;
+	}
 	
+	public String getExportUserId() {
+		return exportUserId;
+	}
+	
+	public void setExportUserId(String exportUserId) {
+		this.exportUserId = exportUserId;
+	}
 }
diff --git a/client/src/java/org/sakaiproject/gradebook/gwt/server/FinalGradeSubmissionHandler.java b/client/src/java/org/sakaiproject/gradebook/gwt/server/FinalGradeSubmissionHandler.java
new file mode 100644
index 0000000..74ecd8e
--- /dev/null
+++ b/client/src/java/org/sakaiproject/gradebook/gwt/server/FinalGradeSubmissionHandler.java
@@ -0,0 +1,91 @@
+package org.sakaiproject.gradebook.gwt.server;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.sakaiproject.gradebook.gwt.client.GradebookToolFacade;
+import org.sakaiproject.gradebook.gwt.client.action.UserEntityGetAction;
+import org.sakaiproject.gradebook.gwt.client.action.Action.EntityType;
+import org.sakaiproject.gradebook.gwt.client.exceptions.FatalException;
+import org.sakaiproject.gradebook.gwt.client.model.StudentModel;
+import org.sakaiproject.gradebook.gwt.sakai.ExportAdvisor;
+import org.sakaiproject.gradebook.gwt.sakai.SampleExportAdvisor;
+import org.sakaiproject.gradebook.gwt.sakai.ExportAdvisor.Column;
+import org.sakaiproject.gradebook.gwt.sakai.mock.DelegateFacadeMockImpl;
+import org.sakaiproject.gradebook.gwt.sakai.mock.IocMock;
+
+/*
+ * Only used in GWT hosted mode
+ *
+ */
+
+public class FinalGradeSubmissionHandler extends HttpServlet {
+
+	private static final Log log = LogFactory.getLog(FinalGradeSubmissionHandler.class);
+	
+	private static final long serialVersionUID = 1L;
+
+	private IocMock iocMock = IocMock.getInstance();
+	private GradebookToolFacade delegateFacade;
+	private ExportAdvisor exportAdvisor;
+	
+	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+		
+		if (delegateFacade == null) {
+			
+			delegateFacade = (GradebookToolFacade)iocMock.getClassInstance(DelegateFacadeMockImpl.class.getName());
+		}
+		
+		exportAdvisor = new SampleExportAdvisor();
+		
+		
+		String queryString = request.getQueryString();
+
+		int n = queryString.indexOf("gradebookUid=") + 13;
+		String gradebookUid = queryString.substring(n);
+		
+		List<StudentModel> rows = null;
+
+		UserEntityGetAction<StudentModel> getRowsAction = new UserEntityGetAction<StudentModel>(gradebookUid, EntityType.STUDENT);
+		try {
+
+			rows = delegateFacade.getEntityList(getRowsAction);
+
+		} catch (FatalException e) {
+
+			log.error("EXCEPTION: Wasn't able to get the list of Student Models");
+			// 500 Internal Server Error
+			response.setStatus(500);
+			e.printStackTrace();
+			return;
+		}
+		
+		List<Map<Column,String>> studentDataList = new ArrayList<Map<Column,String>>();
+		
+		for (StudentModel studentModel : rows) {
+			
+			Map<Column, String> studentData = new HashMap<Column, String>();
+			studentData.put(Column.EXPORT_USER_ID, studentModel.getExportUserId());
+			studentData.put(Column.STUDENT_NAME, studentModel.getStudentName());
+			studentData.put(Column.EXPORT_CM_ID, studentModel.getExportCmId());
+			studentData.put(Column.STUDENT_GRADE, studentModel.getStudentGrade());
+			studentDataList.add(studentData);
+		}
+				
+		exportAdvisor.submitFinalGrade(studentDataList, gradebookUid, request, response);
+	}
+	
+	public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+		doGet(request, response);
+	}
+}
diff --git a/client/src/webapp/WEB-INF/applicationContext.xml b/client/src/webapp/WEB-INF/applicationContext.xml
index 84e8415..3822f7c 100644
--- a/client/src/webapp/WEB-INF/applicationContext.xml
+++ b/client/src/webapp/WEB-INF/applicationContext.xml
@@ -3,6 +3,12 @@
 
 <beans>
 
+	<bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
+		<property name="location">
+			<value>classpath:gradebook2.properties</value>
+		</property>
+	</bean> 
+
 	<!-- Hibernate Mappings -->
 	<bean id="org.sakaiproject.gradebook.gwt.sakai.model.hibernateMappings"
 		class="org.sakaiproject.springframework.orm.hibernate.impl.AdditionalHibernateMappingsImpl">
@@ -12,7 +18,17 @@
 			</list>
 		</property>
 	</bean>
-
+	
+	<!--
+	
+	GRBK-37 : Sample Export Advisor 
+	The Export Advisor is configured via the gradebook2.properties file.
+	The gradebook2.properties file sets the "org.sakaiproject.gradebook.gwt.sakai.api.ExportAdvisor" property
+	which then is injected vi Spring's Property Placeholder Configuration mechanism
+	-->
+	<bean id="org.sakaiproject.gradebook.gwt.sakai.api.ExportAdvisor" class="org.sakaiproject.gradebook.gwt.sakai.SampleExportAdvisor">
+	</bean>
+	
 	<bean id="org.sakaiproject.gradebook.gwt.sakai.GradeCalculations"
 		class="org.sakaiproject.gradebook.gwt.sakai.GradeCalculationsImpl">
 		
@@ -28,6 +44,7 @@
 		<property name="gradeCalculations" ref="org.sakaiproject.gradebook.gwt.sakai.GradeCalculations"/>
 		<property name="frameworkService" ref="org.sakaiproject.service.gradebook.GradebookFrameworkService" />
 		<property name="siteService" ref="org.sakaiproject.site.api.SiteService"/>
+		<property name="exportAdvisor" ref="${org.sakaiproject.gradebook.gwt.sakai.api.ExportAdvisor}"/>
 	</bean>
 			
 	<!-- Declare service -->
@@ -41,6 +58,11 @@
 		<property name="delegateFacade" ref="org.sakaiproject.gradebook.gwt.sakai.DelegateFacade"/>
 	</bean>
 	
+	<bean id="GradebookFinalGradeSubmissionService" class="org.sakaiproject.gradebook.gwt.sakai.GradebookFinalGradeSubmissionController">
+		<property name="delegateFacade" ref="org.sakaiproject.gradebook.gwt.sakai.DelegateFacade"/>
+		<property name="exportAdvisor" ref="${org.sakaiproject.gradebook.gwt.sakai.api.ExportAdvisor}"/>
+	</bean>
+	
 	<bean id="GradebookImportService" class="org.sakaiproject.gradebook.gwt.sakai.GradebookImportController">
 		<property name="delegateFacade" ref="org.sakaiproject.gradebook.gwt.sakai.DelegateFacade"/>
 		<property name="userService" ref="org.sakaiproject.user.api.UserDirectoryService"/>
diff --git a/client/src/webapp/WEB-INF/sakai.gradebook.gwt.rpc-servlet.xml b/client/src/webapp/WEB-INF/sakai.gradebook.gwt.rpc-servlet.xml
index c039c01..b859f00 100644
--- a/client/src/webapp/WEB-INF/sakai.gradebook.gwt.rpc-servlet.xml
+++ b/client/src/webapp/WEB-INF/sakai.gradebook.gwt.rpc-servlet.xml
@@ -12,6 +12,8 @@
 				
 				<entry key="/**/export" value-ref="GradebookExportService" />
 				
+				<entry key="/**/final-grade-submission" value-ref="GradebookFinalGradeSubmissionService" />
+				
 				<entry key="/*" value-ref="myServletForwardingController" />
 			</map>
 		</property>
